//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NAT8Processing.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WaecNatEntities : DbContext
    {
        public WaecNatEntities(string connectionString = "name=WaecNatEntities")
            : base(connectionString)
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<NatCentresCurrent> uspNatCentresCurrent()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NatCentresCurrent>("uspNatCentresCurrent");
        }
    
        public virtual ObjectResult<NatEntries> uspNatEntriesByExamIDExamYearCentreNumber(string examID, Nullable<int> examYear, string centreNumber)
        {
            var examIDParameter = examID != null ?
                new ObjectParameter("examID", examID) :
                new ObjectParameter("examID", typeof(string));
    
            var examYearParameter = examYear.HasValue ?
                new ObjectParameter("examYear", examYear) :
                new ObjectParameter("examYear", typeof(int));
    
            var centreNumberParameter = centreNumber != null ?
                new ObjectParameter("centreNumber", centreNumber) :
                new ObjectParameter("centreNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NatEntries>("uspNatEntriesByExamIDExamYearCentreNumber", examIDParameter, examYearParameter, centreNumberParameter);
        }
    
        public virtual int uspNatInsertUpdateDeleteEntry(string examID, Nullable<int> examYear, string centreNumber, string indexNumber, string candidateName, Nullable<int> sexID, Nullable<int> disabilityID, Nullable<System.DateTime> dateOfBirth, Nullable<int> attempts, string userName, string pcName, string statementType)
        {
            var examIDParameter = examID != null ?
                new ObjectParameter("examID", examID) :
                new ObjectParameter("examID", typeof(string));
    
            var examYearParameter = examYear.HasValue ?
                new ObjectParameter("examYear", examYear) :
                new ObjectParameter("examYear", typeof(int));
    
            var centreNumberParameter = centreNumber != null ?
                new ObjectParameter("centreNumber", centreNumber) :
                new ObjectParameter("centreNumber", typeof(string));
    
            var indexNumberParameter = indexNumber != null ?
                new ObjectParameter("indexNumber", indexNumber) :
                new ObjectParameter("indexNumber", typeof(string));
    
            var candidateNameParameter = candidateName != null ?
                new ObjectParameter("candidateName", candidateName) :
                new ObjectParameter("candidateName", typeof(string));
    
            var sexIDParameter = sexID.HasValue ?
                new ObjectParameter("sexID", sexID) :
                new ObjectParameter("sexID", typeof(int));
    
            var disabilityIDParameter = disabilityID.HasValue ?
                new ObjectParameter("disabilityID", disabilityID) :
                new ObjectParameter("disabilityID", typeof(int));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("dateOfBirth", dateOfBirth) :
                new ObjectParameter("dateOfBirth", typeof(System.DateTime));
    
            var attemptsParameter = attempts.HasValue ?
                new ObjectParameter("attempts", attempts) :
                new ObjectParameter("attempts", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var pcNameParameter = pcName != null ?
                new ObjectParameter("pcName", pcName) :
                new ObjectParameter("pcName", typeof(string));
    
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspNatInsertUpdateDeleteEntry", examIDParameter, examYearParameter, centreNumberParameter, indexNumberParameter, candidateNameParameter, sexIDParameter, disabilityIDParameter, dateOfBirthParameter, attemptsParameter, userNameParameter, pcNameParameter, statementTypeParameter);
        }
    
        public virtual ObjectResult<uspAddCentre_Result> AddNATCentre(string examInitial, string centreNumber, string centreName, string locationString, string ownerString)
        {
            var examInitialParameter = examInitial != null ?
                new ObjectParameter("examInitial", examInitial) :
                new ObjectParameter("examInitial", typeof(string));
    
            var centreNumberParameter = centreNumber != null ?
                new ObjectParameter("centreNumber", centreNumber) :
                new ObjectParameter("centreNumber", typeof(string));
    
            var centreNameParameter = centreName != null ?
                new ObjectParameter("centreName", centreName) :
                new ObjectParameter("centreName", typeof(string));
    
            var locationStringParameter = locationString != null ?
                new ObjectParameter("locationString", locationString) :
                new ObjectParameter("locationString", typeof(string));
    
            var ownerStringParameter = ownerString != null ?
                new ObjectParameter("ownerString", ownerString) :
                new ObjectParameter("ownerString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAddCentre_Result>("AddNATCentre", examInitialParameter, centreNumberParameter, centreNameParameter, locationStringParameter, ownerStringParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspTotalCandidatesNat8()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspTotalCandidatesNat8");
        }
    
        public virtual int DeleteNatCentre(string examID, Nullable<int> examYear, string centreNumber)
        {
            var examIDParameter = examID != null ?
                new ObjectParameter("examID", examID) :
                new ObjectParameter("examID", typeof(string));
    
            var examYearParameter = examYear.HasValue ?
                new ObjectParameter("examYear", examYear) :
                new ObjectParameter("examYear", typeof(int));
    
            var centreNumberParameter = centreNumber != null ?
                new ObjectParameter("centreNumber", centreNumber) :
                new ObjectParameter("centreNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteNatCentre", examIDParameter, examYearParameter, centreNumberParameter);
        }
    
        public virtual int fAddNatCentre(string examInitial, string centreNumber, string centreName, string locationString, string ownerString)
        {
            var examInitialParameter = examInitial != null ?
                new ObjectParameter("examInitial", examInitial) :
                new ObjectParameter("examInitial", typeof(string));
    
            var centreNumberParameter = centreNumber != null ?
                new ObjectParameter("centreNumber", centreNumber) :
                new ObjectParameter("centreNumber", typeof(string));
    
            var centreNameParameter = centreName != null ?
                new ObjectParameter("centreName", centreName) :
                new ObjectParameter("centreName", typeof(string));
    
            var locationStringParameter = locationString != null ?
                new ObjectParameter("locationString", locationString) :
                new ObjectParameter("locationString", typeof(string));
    
            var ownerStringParameter = ownerString != null ?
                new ObjectParameter("ownerString", ownerString) :
                new ObjectParameter("ownerString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("fAddNatCentre", examInitialParameter, centreNumberParameter, centreNameParameter, locationStringParameter, ownerStringParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> fAddCentre2(string examInitial, string centreNumber, string centreName, string locationString, string ownerString)
        {
            var examInitialParameter = examInitial != null ?
                new ObjectParameter("examInitial", examInitial) :
                new ObjectParameter("examInitial", typeof(string));
    
            var centreNumberParameter = centreNumber != null ?
                new ObjectParameter("centreNumber", centreNumber) :
                new ObjectParameter("centreNumber", typeof(string));
    
            var centreNameParameter = centreName != null ?
                new ObjectParameter("centreName", centreName) :
                new ObjectParameter("centreName", typeof(string));
    
            var locationStringParameter = locationString != null ?
                new ObjectParameter("locationString", locationString) :
                new ObjectParameter("locationString", typeof(string));
    
            var ownerStringParameter = ownerString != null ?
                new ObjectParameter("ownerString", ownerString) :
                new ObjectParameter("ownerString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("fAddCentre2", examInitialParameter, centreNumberParameter, centreNameParameter, locationStringParameter, ownerStringParameter);
        }
    
        public virtual ObjectResult<uspGetCentre_Result> fGetCentre(string examID, Nullable<int> centreNumber)
        {
            var examIDParameter = examID != null ?
                new ObjectParameter("examID", examID) :
                new ObjectParameter("examID", typeof(string));
    
            var centreNumberParameter = centreNumber.HasValue ?
                new ObjectParameter("centreNumber", centreNumber) :
                new ObjectParameter("centreNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetCentre_Result>("fGetCentre", examIDParameter, centreNumberParameter);
        }
    
        public virtual ObjectResult<uspDeadline_GetByExamID_ExamYear_Result> fDeadline_GetByExamID_ExamYear(string examID, Nullable<int> examYear)
        {
            var examIDParameter = examID != null ?
                new ObjectParameter("examID", examID) :
                new ObjectParameter("examID", typeof(string));
    
            var examYearParameter = examYear.HasValue ?
                new ObjectParameter("examYear", examYear) :
                new ObjectParameter("examYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspDeadline_GetByExamID_ExamYear_Result>("fDeadline_GetByExamID_ExamYear", examIDParameter, examYearParameter);
        }
    
        public virtual ObjectResult<uspGetNatCandidate_Result> fGetNatCandidate(string examID, Nullable<int> examYear, string centreNumber, string indexNumber)
        {
            var examIDParameter = examID != null ?
                new ObjectParameter("examID", examID) :
                new ObjectParameter("examID", typeof(string));
    
            var examYearParameter = examYear.HasValue ?
                new ObjectParameter("examYear", examYear) :
                new ObjectParameter("examYear", typeof(int));
    
            var centreNumberParameter = centreNumber != null ?
                new ObjectParameter("centreNumber", centreNumber) :
                new ObjectParameter("centreNumber", typeof(string));
    
            var indexNumberParameter = indexNumber != null ?
                new ObjectParameter("indexNumber", indexNumber) :
                new ObjectParameter("indexNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetNatCandidate_Result>("fGetNatCandidate", examIDParameter, examYearParameter, centreNumberParameter, indexNumberParameter);
        }
    
        public virtual ObjectResult<ServerGetDateTime> fServerGetDateTime()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ServerGetDateTime>("fServerGetDateTime");
        }
    
        public virtual int fNatInsertUpdateDeleteEntry2(string examID, Nullable<int> examYear, string centreNumber, string indexNumber, string candidateName, string candidateFirstName, string candidateLastName, string candidateInitial, Nullable<int> sexID, Nullable<int> disabilityID, Nullable<System.DateTime> dateOfBirth, Nullable<int> attempts, string userName, string pcName, string statementType)
        {
            var examIDParameter = examID != null ?
                new ObjectParameter("examID", examID) :
                new ObjectParameter("examID", typeof(string));
    
            var examYearParameter = examYear.HasValue ?
                new ObjectParameter("examYear", examYear) :
                new ObjectParameter("examYear", typeof(int));
    
            var centreNumberParameter = centreNumber != null ?
                new ObjectParameter("centreNumber", centreNumber) :
                new ObjectParameter("centreNumber", typeof(string));
    
            var indexNumberParameter = indexNumber != null ?
                new ObjectParameter("indexNumber", indexNumber) :
                new ObjectParameter("indexNumber", typeof(string));
    
            var candidateNameParameter = candidateName != null ?
                new ObjectParameter("candidateName", candidateName) :
                new ObjectParameter("candidateName", typeof(string));
    
            var candidateFirstNameParameter = candidateFirstName != null ?
                new ObjectParameter("candidateFirstName", candidateFirstName) :
                new ObjectParameter("candidateFirstName", typeof(string));
    
            var candidateLastNameParameter = candidateLastName != null ?
                new ObjectParameter("candidateLastName", candidateLastName) :
                new ObjectParameter("candidateLastName", typeof(string));
    
            var candidateInitialParameter = candidateInitial != null ?
                new ObjectParameter("candidateInitial", candidateInitial) :
                new ObjectParameter("candidateInitial", typeof(string));
    
            var sexIDParameter = sexID.HasValue ?
                new ObjectParameter("sexID", sexID) :
                new ObjectParameter("sexID", typeof(int));
    
            var disabilityIDParameter = disabilityID.HasValue ?
                new ObjectParameter("disabilityID", disabilityID) :
                new ObjectParameter("disabilityID", typeof(int));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("dateOfBirth", dateOfBirth) :
                new ObjectParameter("dateOfBirth", typeof(System.DateTime));
    
            var attemptsParameter = attempts.HasValue ?
                new ObjectParameter("attempts", attempts) :
                new ObjectParameter("attempts", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var pcNameParameter = pcName != null ?
                new ObjectParameter("pcName", pcName) :
                new ObjectParameter("pcName", typeof(string));
    
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("fNatInsertUpdateDeleteEntry2", examIDParameter, examYearParameter, centreNumberParameter, indexNumberParameter, candidateNameParameter, candidateFirstNameParameter, candidateLastNameParameter, candidateInitialParameter, sexIDParameter, disabilityIDParameter, dateOfBirthParameter, attemptsParameter, userNameParameter, pcNameParameter, statementTypeParameter);
        }
    }
}
